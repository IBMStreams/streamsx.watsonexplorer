/* Generated by Streams Studio: November 18, 2016 at 11:42:16 AM EST */
package com.ibm.streams.watsonexplorer.operators;

import java.util.List;

import org.apache.log4j.Logger;

import com.ibm.streams.operator.OperatorContext;
import com.ibm.streams.operator.OutputTuple;
import com.ibm.streams.operator.StreamingInput;
import com.ibm.streams.operator.StreamingOutput;
import com.ibm.streams.operator.Tuple;
import com.ibm.streams.operator.TupleAttribute;
import com.ibm.streams.operator.model.InputPortSet;
import com.ibm.streams.operator.model.InputPortSet.WindowMode;
import com.ibm.streams.operator.model.InputPortSet.WindowPunctuationInputMode;
import com.ibm.streams.operator.model.InputPorts;
import com.ibm.streams.operator.model.Libraries;
import com.ibm.streams.operator.model.OutputPortSet;
import com.ibm.streams.operator.model.OutputPortSet.WindowPunctuationOutputMode;
import com.ibm.streams.watsonexplorer.RestParameters;
import com.ibm.streams.watsonexplorer.SearchResult;
import com.ibm.streams.operator.model.OutputPorts;
import com.ibm.streams.operator.model.Parameter;
import com.ibm.streams.operator.model.PrimitiveOperator;

@PrimitiveOperator(name = "WatsonExplorerQuery", namespace = "com.ibm.streamsx.watsonexplorer", description = WEXQueryOperator.DESC)
@InputPorts({
		@InputPortSet(description = "Port that ingests tuples", cardinality = 1, optional = false, windowingMode = WindowMode.NonWindowed, windowPunctuationInputMode = WindowPunctuationInputMode.Oblivious) })
@OutputPorts({
		@OutputPortSet(description = "Port that produces tuples", cardinality = 1, optional = false, windowPunctuationOutputMode = WindowPunctuationOutputMode.Generating) })
@Libraries({ "opt/downloaded/*", "impl/lib/*" })
public class WEXQueryOperator extends AbstractWEXOperator {

	private static final String DEFAULT_QUERY_ATTR_NAME = "query";

	private List<String> sources;
	private TupleAttribute<Tuple, String> queryAttribute;
	private boolean browse;
	private int browseNum;
	private int num;

	@SuppressWarnings("unused")
	private Logger logger = Logger.getLogger(WEXQueryOperator.class);

	@Parameter(optional = true, name = "queryAttr", description = "Specifies the name of the input attribute that that contains query to execute."
			+ " If this parameter is not specified, the operator will look for an input attribute named *query*.")
	public void setQueryAttribute(TupleAttribute<Tuple, String> queryAttribute) {
		this.queryAttribute = queryAttribute;
	}

	@Parameter(optional = false, description = "Specifies one or more sources (collections) that the operator should search when executing the query.")
	public void setSources(List<String> sources) {
		this.sources = sources;
	}

	@Parameter(optional = true, description = "Specifies whether the operator should return all of the results or only the first page. By default,"
			+ " this value is set to `false`, indicating that only the first page of results will be returned. If set to `true`, the operator will"
			+ " execute multiple REST API calls, retrieving the next page of documents with each call until no more pages are available. When set "
			+ " to `true`, the operator may submit more than one output tuple per input tuple.")
	public void setBrowse(boolean browse) {
		this.browse = browse;
	}

	@Parameter(optional = true, description = "Specifies the number of documents that should be returned per page, when the **browsing** parameter"
			+ " is set to `true`. If this parameter is not set, then the default number of documents per page `10`.")
	public void setBrowseNum(int browseNum) {
		this.browseNum = browseNum;
	}

	@Parameter(optional = true, description = "Specifies the maximum number of documents that will be retrieved from each of the specified sources."
			+ " Specifying a value of `-1` will cause all valid documents to be retrieved."
			+ " If this parameter is not specified, then the default number of documents retrieved per page is `10`.")
	public void setNum(int num) {
		this.num = num;
	}

	public TupleAttribute<Tuple, String> getQueryAttribute() {
		return queryAttribute;
	}

	public List<String> getSources() {
		return sources;
	}

	public int getBrowseNum() {
		return browseNum;
	}

	public int getNum() {
		return num;
	}

	public boolean isBrowse() {
		return browse;
	}

	@Override
	protected void initParameters(OperatorContext context) {
		super.initParameters(context);

		addStaticRestParameter("sources", getSources());

		if (context.getParameterNames().contains("browse")) {
			addStaticRestParameter("browse", Boolean.toString(isBrowse()));
		}
		if (context.getParameterNames().contains("browseNum")) {
			addStaticRestParameter("browse-num", getBrowseNum());
		}
		if (context.getParameterNames().contains("num")) {
			addStaticRestParameter("num", getNum());
		}
	}

	@Override
	public final void process(StreamingInput<Tuple> inputStream, Tuple tuple) throws Exception {
		// Create a new tuple for output port 0
		StreamingOutput<OutputTuple> outStream = getOutput(0);
		OutputTuple outTuple = outStream.newTuple();
		outTuple.assign(tuple);
		
		String query = queryAttribute == null ? tuple.getString(DEFAULT_QUERY_ATTR_NAME)
				: queryAttribute.getValue(tuple);
		RestParameters params = new RestParameters();
		params.put("query", query);
		SearchResult result = wex.querySearch(params);

		outTuple.setString(getResultAttributeName(), result.getContent());
		outStream.submit(outTuple);

		while (result.hasMore()) {
			result = result.next();
			outTuple.setString(getResultAttributeName(), result.getContent());
			outStream.submit(outTuple);
		}
	}
	
	static final String DESC = "This operator uses the Watson"
			+ " Explorer Foundational Components REST API to execute queries against a particular collection. Specifically, this operator uses the"
			+ " `query-search` API function to query for documents.\\n\\n"
			+ " More information about the available parameters for this API function can be found in the Watson Explorer Knowledge Center:"
			+ " http://www.ibm.com/support/knowledgecenter/SS8NLW_11.0.0/com.ibm.swg.im.infosphere.dataexpl.engine.srapi.man.doc/r_function_query-search.html";
}
